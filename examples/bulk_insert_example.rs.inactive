use banking_es::infrastructure::{
    event_store::{EventStore, EventStoreTrait},
    projections::ProjectionStore,
    write_batching::{PartitionedBatching, WriteOperation},
};
use rust_decimal::Decimal;
use std::sync::Arc;
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize event store and projection store
    let event_store = Arc::new(EventStore::new(
        sqlx::PgPool::connect("postgresql://user:pass@localhost/banking_es").await?,
    ));
    let projection_store = Arc::new(
        ProjectionStore::new(banking_es::infrastructure::projections::ProjectionConfig::default())
            .await?,
    );

    // Create write pool (simplified for example)
    let write_pool =
        Arc::new(sqlx::PgPool::connect("postgresql://user:pass@localhost/banking_es").await?);

    // Create outbox batcher
    let outbox_batcher = banking_es::infrastructure::cdc_debezium::OutboxBatcher::new_default(
        Arc::new(
            banking_es::infrastructure::cdc_debezium::CDCOutboxRepository::new(
                event_store.get_partitioned_pools().clone(),
            ),
        ),
        event_store.get_partitioned_pools().clone(),
    );

    // Initialize partitioned batching
    let batching = PartitionedBatching::new(
        event_store.clone(),
        projection_store.clone(),
        write_pool.clone(),
        outbox_batcher,
    )
    .await;

    println!("🚀 Bulk insert sistemi başlatıldı");

    // Örnek 1: Bulk config ile hesap oluşturma
    println!("\n📝 Örnek 1: Bulk config ile hesap oluşturma");

    let accounts = vec![
        ("Ahmet Yılmaz".to_string(), Decimal::new(1000, 0)),
        ("Fatma Demir".to_string(), Decimal::new(2500, 0)),
        ("Mehmet Kaya".to_string(), Decimal::new(500, 0)),
        ("Ayşe Özkan".to_string(), Decimal::new(3000, 0)),
        ("Ali Çelik".to_string(), Decimal::new(1500, 0)),
    ];

    // Bulk config ile hesap oluşturma
    let account_ids = batching
        .submit_create_operations_batch_with_bulk_config(accounts)
        .await?;

    println!("✅ {} hesap başarıyla oluşturuldu", account_ids.len());

    // Örnek 2: Bulk config ile para yatırma işlemleri
    println!("\n💰 Örnek 2: Bulk config ile para yatırma işlemleri");

    let deposit_operations = account_ids
        .iter()
        .map(|account_id| {
            WriteOperation::DepositMoney {
                account_id: *account_id,
                amount: Decimal::new(100, 0), // 100 TL yatır
            }
        })
        .collect::<Vec<_>>();

    // Bulk config ile para yatırma
    let deposit_results = batching
        .submit_operations_with_bulk_config(deposit_operations)
        .await?;

    println!(
        "✅ {} para yatırma işlemi başarıyla tamamlandı",
        deposit_results.len()
    );

    // Örnek 3: Manuel bulk mod kontrolü
    println!("\n⚙️ Örnek 3: Manuel bulk mod kontrolü");

    // Bulk modu manuel olarak başlat
    batching.start_bulk_mode_all_partitions().await?;
    println!("🔄 Bulk mod aktif");

    // İşlemleri yap
    let withdrawal_operations = account_ids
        .iter()
        .take(3) // İlk 3 hesaptan para çek
        .map(|account_id| {
            WriteOperation::WithdrawMoney {
                account_id: *account_id,
                amount: Decimal::new(50, 0), // 50 TL çek
            }
        })
        .collect::<Vec<_>>();

    let withdrawal_results = batching
        .submit_operations_as_direct_batches(withdrawal_operations)
        .await?;

    println!(
        "✅ {} para çekme işlemi tamamlandı",
        withdrawal_results.len()
    );

    // Bulk modu manuel olarak sonlandır
    batching.end_bulk_mode_all_partitions().await?;
    println!("🔄 Bulk mod sonlandırıldı");

    // Örnek 4: Büyük ölçekli bulk işlem
    println!("\n📊 Örnek 4: Büyük ölçekli bulk işlem");

    // 1000 hesap oluştur
    let large_accounts = (0..1000)
        .map(|i| {
            (
                format!("Kullanıcı_{}", i),
                Decimal::new(1000 + (i as i64 * 10), 0),
            )
        })
        .collect::<Vec<_>>();

    println!("🔄 1000 hesap oluşturuluyor (bulk config ile)...");
    let start_time = std::time::Instant::now();

    let large_account_ids = batching
        .submit_create_operations_batch_with_bulk_config(large_accounts)
        .await?;

    let duration = start_time.elapsed();
    println!(
        "✅ {} hesap {} saniyede oluşturuldu (saniyede {:.0} hesap)",
        large_account_ids.len(),
        duration.as_secs_f64(),
        large_account_ids.len() as f64 / duration.as_secs_f64()
    );

    println!("\n🎉 Tüm bulk insert işlemleri başarıyla tamamlandı!");
    println!("📈 Sistem performansı:");
    println!("   - Event store batch size: 5000 (normal: 1000)");
    println!("   - Projection cache: devre dışı (normal: aktif)");
    println!("   - Batch timeout: 50ms (normal: 100ms)");
    println!("   - Processor count: 16 (normal: 8)");

    Ok(())
}
