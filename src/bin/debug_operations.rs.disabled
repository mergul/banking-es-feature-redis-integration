use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{
        cache_service::{CacheConfig, CacheService},
        event_store::EventStore,
        kafka_abstraction::KafkaConfig,
        projections::ProjectionStore,
        redis_abstraction::RealRedisClient,
    },
};
use rust_decimal::Decimal;
use sqlx::PgPool;
use std::sync::Arc;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("🔍 Debugging Operations");
    println!("======================");

    // Setup database connection
    let database_url = "postgresql://postgres:Francisco1@localhost:5432/banking_es";
    let pool = PgPool::connect(database_url).await?;

    // Setup Redis client
    let redis_url = "redis://localhost:6379";
    let redis_client = redis::Client::open(redis_url)?;
    let redis_client_trait = RealRedisClient::new(redis_client, None);

    // Setup services
    let event_store = Arc::new(EventStore::new(pool.clone()));
    let cache_config = CacheConfig::default();
    let cache_service = Arc::new(CacheService::new(redis_client_trait, cache_config));
    let projection_store = Arc::new(ProjectionStore::new(pool.clone()));

    // Setup CQRS service
    let kafka_config = KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        event_store.clone(),
        projection_store.clone(),
        cache_service.clone(),
        kafka_config,
        50,
        25,
        std::time::Duration::from_secs(2),
        true,
    ));

    // Start write batching service
    cqrs_service.start_write_batching().await?;
    println!("✅ Services initialized");

    // Test 1: Create an account
    println!("\n📝 Test 1: Creating an account");
    match cqrs_service
        .create_account("DebugUser_1".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(account_id) => {
            println!("✅ Account created successfully: {}", account_id);

            // Test 2: Get the account
            println!("\n📖 Test 2: Getting the account");
            match cqrs_service.get_account(account_id).await {
                Ok(account) => {
                    println!("✅ Account retrieved successfully: {:?}", account);

                    // Test 3: Deposit money
                    println!("\n💰 Test 3: Depositing money");
                    match cqrs_service
                        .deposit_money(account_id, Decimal::new(100, 0))
                        .await
                    {
                        Ok(_) => {
                            println!("✅ Deposit successful");

                            // Test 4: Get balance
                            println!("\n💳 Test 4: Getting balance");
                            match cqrs_service.get_account_balance(account_id).await {
                                Ok(balance) => println!("✅ Balance: {}", balance),
                                Err(e) => println!("❌ Failed to get balance: {:?}", e),
                            }
                        }
                        Err(e) => println!("❌ Deposit failed: {:?}", e),
                    }
                }
                Err(e) => println!("❌ Failed to get account: {:?}", e),
            }
        }
        Err(e) => println!("❌ Failed to create account: {:?}", e),
    }

    // Test 5: Get all accounts
    println!("\n📋 Test 5: Getting all accounts");
    match cqrs_service.get_all_accounts().await {
        Ok(accounts) => println!("✅ Found {} accounts", accounts.len()),
        Err(e) => println!("❌ Failed to get all accounts: {:?}", e),
    }

    println!("\n🎯 Debug completed");
    Ok(())
}
