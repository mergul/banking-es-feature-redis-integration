use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{
        cache_service::{CacheConfig, CacheService},
        event_store::EventStore,
        projections::ProjectionStore,
        RealRedisClient,
    },
};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("🔍 Direct Read Operations Test");
    println!("==============================");

    // Set the database URL
    std::env::set_var(
        "DATABASE_URL",
        "postgresql://postgres:Francisco1@localhost:5432/banking_es",
    );

    // Initialize services
    let database_url = std::env::var("DATABASE_URL").unwrap_or_else(|_| {
        "postgresql://postgres:Francisco1@localhost:5432/banking_es".to_string()
    });

    let pool = sqlx::PgPool::connect(&database_url)
        .await
        .expect("Failed to connect to database");

    let redis_url =
        std::env::var("REDIS_URL").unwrap_or_else(|_| "redis://localhost:6379".to_string());
    let redis_client = redis::Client::open(redis_url).expect("Failed to create Redis client");
    let redis_client_trait = RealRedisClient::new(redis_client, None);

    let event_store = Arc::new(EventStore::new(pool.clone()));
    let cache_config = CacheConfig::default();
    let cache_service = Arc::new(CacheService::new(redis_client_trait, cache_config));
    let projection_store = Arc::new(ProjectionStore::new(pool.clone()));

    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        event_store.clone(),
        projection_store.clone(),
        cache_service.clone(),
        kafka_config,
        50,                     // max_concurrent_operations
        25,                     // batch_size
        Duration::from_secs(2), // batch_timeout
        true,                   // enable_write_batching
    ));

    println!("✅ Services initialized");

    // Test 1: Direct database query to check projections table
    println!("\n📊 Test 1: Direct Database Query");
    println!("=================================");

    let direct_accounts = sqlx::query!(
        "SELECT id, owner_name, balance, is_active FROM account_projections WHERE is_active = true AND owner_name != '' LIMIT 5"
    )
    .fetch_all(&pool)
    .await?;

    println!(
        "✅ Found {} active accounts with names in projections table",
        direct_accounts.len()
    );

    for (i, account) in direct_accounts.iter().enumerate() {
        println!(
            "  Account {}: ID={}, Owner={}, Balance={}, Active={}",
            i + 1,
            account.id,
            account.owner_name,
            account.balance,
            account.is_active
        );
    }

    if direct_accounts.is_empty() {
        println!("⚠️  No valid accounts found in projections table");
        return Ok(());
    }

    // Test 2: Direct projection store query (bypassing consistency manager)
    println!("\n📖 Test 2: Direct Projection Store Query");
    println!("=========================================");

    for (i, account) in direct_accounts.iter().enumerate() {
        println!("\n--- Testing Account {}: {} ---", i + 1, account.id);

        // Use the projection store directly
        match projection_store.get_account(account.id).await {
            Ok(Some(projection)) => {
                println!(
                    "  ✅ Direct projection query: Owner={}, Balance={}, Active={}",
                    projection.owner_name, projection.balance, projection.is_active
                );
            }
            Ok(None) => {
                println!("  ❌ Direct projection query: Account not found");
            }
            Err(e) => {
                println!("  ❌ Direct projection query error: {:?}", e);
            }
        }
    }

    // Test 3: CQRS service read operations with shorter timeouts
    println!("\n🔍 Test 3: CQRS Service Read Operations (Short Timeout)");
    println!("=======================================================");

    for (i, account) in direct_accounts.iter().enumerate() {
        println!("\n--- Testing CQRS Account {}: {} ---", i + 1, account.id);

        // Test get_account with short timeout
        println!("  📖 Testing get_account (3s timeout)...");
        match tokio::time::timeout(Duration::from_secs(3), cqrs_service.get_account(account.id))
            .await
        {
            Ok(Ok(Some(account_details))) => {
                println!(
                    "    ✅ Success - Owner: {}, Balance: {}, Active: {}",
                    account_details.owner_name, account_details.balance, account_details.is_active
                );
            }
            Ok(Ok(None)) => {
                println!("    ⚠️  Account not found in CQRS service");
            }
            Ok(Err(e)) => {
                println!("    ❌ Error: {:?}", e);
            }
            Err(_) => {
                println!("    ❌ Timeout (3s) - consistency manager waiting too long");
            }
        }

        // Test get_account_balance with short timeout
        println!("  💰 Testing get_account_balance (3s timeout)...");
        match tokio::time::timeout(
            Duration::from_secs(3),
            cqrs_service.get_account_balance(account.id),
        )
        .await
        {
            Ok(Ok(balance)) => {
                println!("    ✅ Success - Balance: {}", balance);
            }
            Ok(Err(e)) => {
                println!("    ❌ Error: {:?}", e);
            }
            Err(_) => {
                println!("    ❌ Timeout (3s) - consistency manager waiting too long");
            }
        }

        // Test is_account_active with short timeout
        println!("  ✅ Testing is_account_active (3s timeout)...");
        match tokio::time::timeout(
            Duration::from_secs(3),
            cqrs_service.is_account_active(account.id),
        )
        .await
        {
            Ok(Ok(is_active)) => {
                println!("    ✅ Success - Active: {}", is_active);
            }
            Ok(Err(e)) => {
                println!("    ❌ Error: {:?}", e);
            }
            Err(_) => {
                println!("    ❌ Timeout (3s) - consistency manager waiting too long");
            }
        }
    }

    println!("\n✅ Direct read operations test completed!");
    println!("\n📋 Summary:");
    println!("  - Data exists in projections table: ✅");
    println!("  - Direct projection store queries work: ✅");
    println!("  - CQRS service read operations: May timeout due to consistency manager");
    println!(
        "  - Issue: Consistency manager is waiting for CDC notifications that may not be coming"
    );

    Ok(())
}
