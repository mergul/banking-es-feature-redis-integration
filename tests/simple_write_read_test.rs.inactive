use banking_es::{application::services::CQRSAccountService, infrastructure::init};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_simple_write_read() {
    println!("🔧 Simple Write/Read Test (No CDC)");
    println!("===================================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service WITHOUT write batching to avoid CDC dependency
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config.clone(),
        5,  // Low concurrency
        10, // Small batch size
        Duration::from_millis(50),
        false, // DISABLE write batching - this bypasses CDC
    ));

    println!("✅ CQRS service created (write batching disabled)");

    // Test 1: Create account
    println!("\n📝 Test 1: Create Account");
    let account_id = match cqrs_service
        .create_account("SimpleUser".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Account created: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create account: {:?}", e);
            return;
        }
    };

    // Test 2: Read account immediately (should work without CDC)
    println!("\n📖 Test 2: Immediate Read");
    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!(
                "✅ Success! Found account: {} (balance: {})",
                account.owner_name, account.balance
            );
        }
        Ok(None) => {
            println!("❌ Account not found in projections");
        }
        Err(e) => {
            println!("❌ Read error: {:?}", e);
        }
    }

    // Test 3: Deposit money
    println!("\n💰 Test 3: Deposit Money");
    match cqrs_service
        .deposit_money(account_id, Decimal::new(500, 0))
        .await
    {
        Ok(_) => {
            println!("✅ Deposit successful");
        }
        Err(e) => {
            println!("❌ Deposit failed: {:?}", e);
        }
    }

    // Test 4: Read account again
    println!("\n📖 Test 4: Read After Deposit");
    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!(
                "✅ Success! Found account: {} (balance: {})",
                account.owner_name, account.balance
            );
        }
        Ok(None) => {
            println!("❌ Account not found in projections");
        }
        Err(e) => {
            println!("❌ Read error: {:?}", e);
        }
    }

    // Test 5: Check balance
    println!("\n💰 Test 5: Check Balance");
    match cqrs_service.get_account_balance(account_id).await {
        Ok(balance) => {
            println!("✅ Balance: {}", balance);
        }
        Err(e) => {
            println!("❌ Balance check failed: {:?}", e);
        }
    }

    println!("\n🎯 Simple write/read test completed!");
}
