use banking_es::infrastructure::consistency_manager::{ConsistencyManager, ProjectionStatus};
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_consistency_manager_projection_sync() {
    println!("🔧 Consistency Manager Projection Sync Test");
    println!("===========================================");

    // Create consistency manager
    let consistency_manager =
        ConsistencyManager::new(Duration::from_secs(30), Duration::from_secs(60));

    let test_account_id = Uuid::new_v4();
    println!("Test account ID: {}", test_account_id);

    // Test 1: Mark projection as pending
    println!("\n📝 Test 1: Mark Projection as Pending");
    consistency_manager
        .mark_projection_pending(test_account_id)
        .await;
    println!("✅ Marked projection as pending");

    // Test 2: Check status
    println!("\n📊 Test 2: Check Projection Status");
    let status = consistency_manager
        .get_projection_status(test_account_id)
        .await;
    println!("Projection status: {:?}", status);

    // Test 3: Mark projection as completed
    println!("\n✅ Test 3: Mark Projection as Completed");
    consistency_manager
        .mark_projection_completed(test_account_id)
        .await;
    println!("✅ Marked projection as completed");

    // Test 4: Check status again
    println!("\n📊 Test 4: Check Projection Status Again");
    let status = consistency_manager
        .get_projection_status(test_account_id)
        .await;
    println!("Projection status: {:?}", status);

    // Test 5: Wait for projection sync
    println!("\n⏳ Test 5: Wait for Projection Sync");
    match consistency_manager
        .wait_for_projection_sync(test_account_id)
        .await
    {
        Ok(_) => {
            println!("✅ Projection sync completed successfully");
        }
        Err(e) => {
            println!("❌ Projection sync failed: {:?}", e);
        }
    }

    println!("🎯 Consistency manager test completed!");
}
