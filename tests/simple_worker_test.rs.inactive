use banking_es::{application::services::CQRSAccountService, infrastructure::init};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::{Duration, Instant};
use uuid::Uuid;

#[tokio::test]
async fn test_simple_worker() {
    println!("🔍 Starting Simple Worker Test");
    println!("==============================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        10,
        10,
        Duration::from_millis(100),
        false,
    ));

    // Create test accounts
    println!("🔧 Creating test accounts...");
    let mut account_ids = Vec::new();
    for i in 0..5 {
        match cqrs_service
            .create_account(format!("WorkerTestUser{}", i), Decimal::new(1000, 0))
            .await
        {
            Ok(account_id) => {
                account_ids.push(account_id);
                println!("  ✅ Created account {}: {}", i + 1, account_id);
            }
            Err(e) => {
                println!("  ❌ Failed to create account {}: {:?}", i + 1, e);
            }
        }
    }

    // Wait for projections
    println!("⏳ Waiting for projections to update...");
    tokio::time::sleep(Duration::from_secs(3)).await;

    // Test single worker with simple operations
    println!("🔧 Testing single worker...");
    let start = Instant::now();

    for (i, &account_id) in account_ids.iter().enumerate() {
        println!("  📊 Operation {}/{}", i + 1, account_ids.len());

        // Simple read operation
        let read_start = Instant::now();
        let read_result = cqrs_service.get_account_balance(account_id).await;
        match read_result {
            Ok(balance) => println!(
                "    ✅ Read balance: {} in {:?}",
                balance,
                read_start.elapsed()
            ),
            Err(e) => println!("    ❌ Read failed: {:?}", e),
        }

        // Simple write operation
        let write_start = Instant::now();
        let write_result = cqrs_service
            .deposit_money(account_id, Decimal::new(10, 0))
            .await;
        match write_result {
            Ok(_) => println!("    ✅ Write successful in {:?}", write_start.elapsed()),
            Err(e) => println!("    ❌ Write failed: {:?}", e),
        }

        // Small delay
        tokio::time::sleep(Duration::from_millis(50)).await;
    }

    println!("✅ Worker test completed in {:?}", start.elapsed());
}
