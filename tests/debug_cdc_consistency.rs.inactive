use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{
        cdc_debezium::{CDCOutboxRepository, DebeziumConfig},
        cdc_event_processor::UltraOptimizedCDCEventProcessor,
        cdc_service_manager::{CDCServiceManager, EnhancedCDCMetrics},
        init,
    },
};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_debug_cdc_consistency() {
    println!("🔧 Debug CDC Consistency Test");
    println!("=============================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config.clone(),
        10,
        10,
        Duration::from_millis(100),
        false, // Disable write batching for debug
    ));

    // Get consistency manager
    let consistency_manager = cqrs_service.get_consistency_manager();

    println!("✅ CQRS service created");

    // Test 1: Create account
    println!("\n📝 Test 1: Create Account");
    let account_id = match cqrs_service
        .create_account("DebugUser".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Account created: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create account: {:?}", e);
            return;
        }
    };

    // Check initial projection status
    let initial_status = consistency_manager.get_projection_status(account_id).await;
    println!("📊 Initial projection status: {:?}", initial_status);

    // Wait a bit
    tokio::time::sleep(Duration::from_secs(2)).await;

    // Check projection status again
    let status_after_wait = consistency_manager.get_projection_status(account_id).await;
    println!("📊 Projection status after wait: {:?}", status_after_wait);

    // Test 2: Create CDC service manager with the same consistency manager
    println!("\n📝 Test 2: Create CDC Service Manager");
    let cdc_outbox_repo = Arc::new(CDCOutboxRepository::new(
        service_context.event_store.get_partitioned_pools().clone(),
    ));

    let kafka_producer_for_cdc =
        banking_es::infrastructure::kafka_abstraction::KafkaProducer::new(kafka_config.clone())
            .expect("Failed to create Kafka producer");
    let kafka_consumer_for_cdc =
        banking_es::infrastructure::kafka_abstraction::KafkaConsumer::new(kafka_config.clone())
            .expect("Failed to create Kafka consumer");

    let cdc_config = DebeziumConfig::default();
    let metrics = Arc::new(EnhancedCDCMetrics::default());

    let mut cdc_service_manager = CDCServiceManager::new(
        cdc_config,
        cdc_outbox_repo,
        kafka_producer_for_cdc,
        kafka_consumer_for_cdc,
        service_context.cache_service.clone(),
        service_context.projection_store.clone(),
        Some(metrics.clone()),
        Some(consistency_manager.clone()), // Pass the same consistency manager
    )
    .expect("Failed to create CDC service manager");

    println!("✅ CDC Service Manager created");

    // Test 3: Start CDC service
    println!("\n📝 Test 3: Start CDC Service");
    match cdc_service_manager.start().await {
        Ok(_) => {
            println!("✅ CDC Service Manager started");
        }
        Err(e) => {
            println!("❌ Failed to start CDC service: {:?}", e);
            return;
        }
    }

    // Wait for CDC to process events
    println!("⏳ Waiting for CDC to process events...");
    for i in 1..=10 {
        tokio::time::sleep(Duration::from_secs(1)).await;
        let status = consistency_manager.get_projection_status(account_id).await;
        println!("  {}s - Projection status: {:?}", i, status);

        if status
            == Some(banking_es::infrastructure::consistency_manager::ProjectionStatus::Completed)
        {
            println!("✅ Projection marked as completed by CDC!");
            break;
        }
    }

    // Test 4: Try to read the account
    println!("\n📝 Test 4: Read Account");
    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!("✅ Successfully read account: {:?}", account);
        }
        Ok(None) => {
            println!("❌ Account not found");
        }
        Err(e) => {
            println!("❌ Error reading account: {:?}", e);
        }
    }

    // Stop CDC service
    match cdc_service_manager.stop().await {
        Ok(_) => {
            println!("✅ CDC service stopped");
        }
        Err(e) => {
            println!("⚠️ Warning: Failed to stop CDC service: {:?}", e);
        }
    }

    println!("\n🎯 Debug CDC consistency test completed!");
}
