use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{consistency_manager::ConsistencyManager, init},
};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::{Duration, Instant};
use uuid::Uuid;

#[tokio::test]
async fn test_projection_sync() {
    println!("🔍 Testing Projection Synchronization");
    println!("=====================================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        10,
        10,
        Duration::from_millis(100),
        false,
    ));

    // Test 1: Create account and verify projection sync
    println!("📊 Test 1: Create Account with Projection Sync");
    let start = Instant::now();

    let account_result = cqrs_service
        .create_account("SyncTestUser".to_string(), Decimal::new(1000, 0))
        .await;

    match account_result {
        Ok(account_id) => {
            println!(
                "✅ Account created: {} in {:?}",
                account_id,
                start.elapsed()
            );

            // Test 2: Read account immediately (should work with projection sync)
            println!("📊 Test 2: Read Account Immediately");
            let read_start = Instant::now();

            let read_result = cqrs_service.get_account(account_id).await;
            match read_result {
                Ok(Some(account)) => {
                    println!(
                        "✅ Read successful: {} in {:?}",
                        account.owner_name,
                        read_start.elapsed()
                    );
                    println!("   Balance: {}", account.balance);
                    println!("   Active: {}", account.is_active);
                }
                Ok(None) => {
                    println!("⚠️ Account not found in projections");
                }
                Err(e) => {
                    println!("❌ Read failed: {:?}", e);
                }
            }
        }
        Err(e) => {
            println!("❌ Account creation failed: {:?}", e);
        }
    }

    // Test 3: Test projection sync manager directly
    println!("📊 Test 3: Direct Projection Sync Manager Test");
    let sync_manager = Arc::new(ConsistencyManager::new(
        Duration::from_secs(5),
        Duration::from_secs(60),
    ));

    let test_id = Uuid::new_v4();

    // Mark as pending
    sync_manager.mark_projection_pending(test_id).await;
    println!("  ✅ Marked as pending");

    // Mark as processing
    sync_manager.mark_projection_processing(test_id).await;
    println!("  ✅ Marked as processing");

    // Mark as completed
    sync_manager.mark_projection_completed(test_id).await;
    println!("  ✅ Marked as completed");

    // Test wait for completion
    let wait_start = Instant::now();
    match sync_manager.wait_for_projection_sync(test_id).await {
        Ok(_) => {
            println!(
                "  ✅ Wait for completion successful in {:?}",
                wait_start.elapsed()
            );
        }
        Err(e) => {
            println!("  ❌ Wait for completion failed: {:?}", e);
        }
    }

    // Test 4: Test timeout scenario
    println!("📊 Test 4: Timeout Scenario Test");
    let timeout_id = Uuid::new_v4();
    sync_manager.mark_projection_pending(timeout_id).await;

    // Don't mark as completed, should timeout
    let timeout_start = Instant::now();
    match sync_manager.wait_for_projection_sync(timeout_id).await {
        Ok(_) => {
            println!("  ⚠️ Unexpected success in timeout test");
        }
        Err(e) => {
            println!(
                "  ✅ Expected timeout: {:?} in {:?}",
                e,
                timeout_start.elapsed()
            );
        }
    }

    println!("🎯 Projection sync test completed!");
}
