// use banking_es::{
//     application::services::CQRSAccountService,
//     infrastructure::{
//         cache_service::{CacheConfig, CacheService},
//         event_store::EventStore,
//         kafka_abstraction::KafkaConfig,
//         projections::ProjectionStore,
//         redis_abstraction::RealRedisClient,
//     },
// };
// use rust_decimal::Decimal;
// use sqlx::PgPool;
// use std::sync::Arc;
// use uuid::Uuid;

// #[tokio::test]
// async fn test_simple_batch_operations() {
//     println!("🚀 Starting Simple Batch Operations Test");

//     // Setup database connection
//     let database_url = std::env::var("DATABASE_URL").unwrap_or_else(|_| {
//         "postgresql://postgres:Francisco1@localhost:5432/banking_es".to_string()
//     });

//     let pool = PgPool::connect(&database_url)
//         .await
//         .expect("Failed to connect to database");

//     // Setup Redis client
//     let redis_url =
//         std::env::var("REDIS_URL").unwrap_or_else(|_| "redis://localhost:6379".to_string());
//     let redis_client = redis::Client::open(redis_url).expect("Failed to create Redis client");
//     let redis_client_trait = RealRedisClient::new(redis_client, None);

//     // Setup services
//     let event_store = Arc::new(EventStore::new(pool.clone()));
//     let cache_config = CacheConfig::default();
//     let cache_service = Arc::new(CacheService::new(redis_client_trait, cache_config));
//     let projection_store = Arc::new(ProjectionStore::new(pool.clone()));

//     // Setup CQRS service with write batching enabled
//     let kafka_config = KafkaConfig::default();
//     let cqrs_service = Arc::new(CQRSAccountService::new(
//         event_store.clone(),
//         projection_store.clone(),
//         cache_service.clone(),
//         kafka_config,
//         100,                               // max_connections
//         50,                                // batch_size
//         std::time::Duration::from_secs(5), // batch_timeout
//         true,                              // enable_batching
//     ));

//     // Start write batching service
//     cqrs_service
//         .start_write_batching()
//         .await
//         .expect("Failed to start write batching service");

//     println!("✅ Services initialized with write batching enabled");

//     // Test 1: Create a single account
//     println!("🔄 Test 1: Creating a single account...");
//     let owner_name = "Test User".to_string();
//     let initial_balance = Decimal::new(1000, 0);

//     match cqrs_service
//         .create_account(owner_name.clone(), initial_balance)
//         .await
//     {
//         Ok(account_id) => {
//             println!("✅ Successfully created account: {}", account_id);

//             // Test 2: Get the account
//             println!("🔄 Test 2: Retrieving the account...");
//             match cqrs_service.get_account(account_id).await {
//                 Ok(Some(account)) => {
//                     println!("✅ Successfully retrieved account:");
//                     println!("  - ID: {}", account.id);
//                     println!("  - Owner: {}", account.owner_name);
//                     println!("  - Balance: {}", account.balance);
//                     println!("  - Active: {}", account.is_active);
//                 }
//                 Ok(None) => {
//                     println!("⚠️  Account not found");
//                 }
//                 Err(e) => {
//                     println!("❌ Error retrieving account: {:?}", e);
//                 }
//             }

//             // Test 3: Deposit money
//             println!("🔄 Test 3: Depositing money...");
//             let deposit_amount = Decimal::new(500, 0);
//             match cqrs_service.deposit_money(account_id, deposit_amount).await {
//                 Ok(_) => {
//                     println!("✅ Successfully deposited {}", deposit_amount);

//                     // Verify the balance
//                     match cqrs_service.get_account_balance(account_id).await {
//                         Ok(balance) => {
//                             println!("✅ New balance: {}", balance);
//                             let expected_balance = initial_balance + deposit_amount;
//                             if balance == expected_balance {
//                                 println!("✅ Balance verification successful");
//                             } else {
//                                 println!(
//                                     "⚠️  Balance verification failed. Expected: {}, Got: {}",
//                                     expected_balance, balance
//                                 );
//                             }
//                         }
//                         Err(e) => {
//                             println!("❌ Error getting balance: {:?}", e);
//                         }
//                     }
//                 }
//                 Err(e) => {
//                     println!("❌ Error depositing money: {:?}", e);
//                 }
//             }

//             // Test 4: Withdraw money
//             println!("🔄 Test 4: Withdrawing money...");
//             let withdraw_amount = Decimal::new(200, 0);
//             match cqrs_service
//                 .withdraw_money(account_id, withdraw_amount)
//                 .await
//             {
//                 Ok(_) => {
//                     println!("✅ Successfully withdrew {}", withdraw_amount);

//                     // Verify the balance
//                     match cqrs_service.get_account_balance(account_id).await {
//                         Ok(balance) => {
//                             println!("✅ Final balance: {}", balance);
//                             let expected_balance =
//                                 initial_balance + deposit_amount - withdraw_amount;
//                             if balance == expected_balance {
//                                 println!("✅ Final balance verification successful");
//                             } else {
//                                 println!(
//                                     "⚠️  Final balance verification failed. Expected: {}, Got: {}",
//                                     expected_balance, balance
//                                 );
//                             }
//                         }
//                         Err(e) => {
//                             println!("❌ Error getting final balance: {:?}", e);
//                         }
//                     }
//                 }
//                 Err(e) => {
//                     println!("❌ Error withdrawing money: {:?}", e);
//                 }
//             }
//         }
//         Err(e) => {
//             println!("❌ Error creating account: {:?}", e);
//         }
//     }

//     println!("✅ Simple batch operations test completed!");
// }

// #[tokio::test]
// async fn test_batch_account_creation() {
//     println!("🚀 Starting Batch Account Creation Test");

//     // Setup database connection
//     let database_url = std::env::var("DATABASE_URL").unwrap_or_else(|_| {
//         "postgresql://postgres:Francisco1@localhost:5432/banking_es".to_string()
//     });

//     let pool = PgPool::connect(&database_url)
//         .await
//         .expect("Failed to connect to database");

//     // Setup Redis client
//     let redis_url =
//         std::env::var("REDIS_URL").unwrap_or_else(|_| "redis://localhost:6379".to_string());
//     let redis_client = redis::Client::open(redis_url).expect("Failed to create Redis client");
//     let redis_client_trait = RealRedisClient::new(redis_client, None);

//     // Setup services
//     let event_store = Arc::new(EventStore::new(pool.clone()));
//     let cache_config = CacheConfig::default();
//     let cache_service = Arc::new(CacheService::new(redis_client_trait, cache_config));
//     let projection_store = Arc::new(ProjectionStore::new(pool.clone()));

//     // Setup CQRS service with write batching enabled
//     let kafka_config = KafkaConfig::default();
//     let cqrs_service = Arc::new(CQRSAccountService::new(
//         event_store.clone(),
//         projection_store.clone(),
//         cache_service.clone(),
//         kafka_config,
//         100,                               // max_connections
//         50,                                // batch_size
//         std::time::Duration::from_secs(5), // batch_timeout
//         true,                              // enable_batching
//     ));

//     // Start write batching service
//     cqrs_service
//         .start_write_batching()
//         .await
//         .expect("Failed to start write batching service");

//     println!("✅ Services initialized with write batching enabled");

//     // Create multiple accounts in parallel
//     let account_count = 10;
//     println!("🔄 Creating {} accounts in parallel...", account_count);

//     let mut tasks = Vec::new();
//     for i in 0..account_count {
//         let cqrs_service = cqrs_service.clone();
//         let owner_name = format!("Batch User {}", i);
//         let initial_balance = Decimal::new(1000 + (i * 100) as i64, 0);

//         let task = tokio::spawn(async move {
//             cqrs_service
//                 .create_account(owner_name, initial_balance)
//                 .await
//         });
//         tasks.push(task);
//     }

//     // Wait for all accounts to be created
//     let mut account_ids = Vec::new();
//     let mut successful_creations = 0;

//     for task in tasks {
//         match task.await {
//             Ok(Ok(account_id)) => {
//                 account_ids.push(account_id);
//                 successful_creations += 1;
//                 println!("✅ Created account: {}", account_id);
//             }
//             Ok(Err(e)) => {
//                 println!("❌ Failed to create account: {:?}", e);
//             }
//             Err(e) => {
//                 println!("❌ Task failed: {:?}", e);
//             }
//         }
//     }

//     println!("📊 Account creation results:");
//     println!("  - Attempted: {}", account_count);
//     println!("  - Successful: {}", successful_creations);
//     println!(
//         "  - Success rate: {:.1}%",
//         (successful_creations as f64 / account_count as f64) * 100.0
//     );

//     // Verify all accounts exist
//     if !account_ids.is_empty() {
//         println!("🔄 Verifying created accounts...");
//         let mut verified_accounts = 0;

//         for account_id in &account_ids {
//             match cqrs_service.get_account(*account_id).await {
//                 Ok(Some(account)) => {
//                     verified_accounts += 1;
//                     println!(
//                         "✅ Verified account: {} (Owner: {}, Balance: {})",
//                         account.id, account.owner_name, account.balance
//                     );
//                 }
//                 Ok(None) => {
//                     println!("⚠️  Account not found: {}", account_id);
//                 }
//                 Err(e) => {
//                     println!("❌ Error verifying account {}: {:?}", account_id, e);
//                 }
//             }
//         }

//         println!("📊 Account verification results:");
//         println!("  - Created: {}", account_ids.len());
//         println!("  - Verified: {}", verified_accounts);
//         println!(
//             "  - Verification rate: {:.1}%",
//             (verified_accounts as f64 / account_ids.len() as f64) * 100.0
//         );
//     }

//     println!("✅ Batch account creation test completed!");
// }
