use banking_es::{application::services::CQRSAccountService, infrastructure::init};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_basic_functionality_without_sync() {
    println!("🔧 Basic Functionality Test (No Projection Sync)");
    println!("===============================================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service without write batching to avoid complexity
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        5,  // Low concurrency
        10, // Small batch size
        Duration::from_millis(100),
        false, // DISABLE write batching to avoid complexity
    ));

    println!("✅ CQRS service created");

    // Test 1: Create account
    println!("\n📝 Test 1: Create Account");
    let account_id = match tokio::time::timeout(
        Duration::from_secs(10),
        cqrs_service.create_account("BasicTestUser".to_string(), Decimal::new(1000, 0)),
    )
    .await
    {
        Ok(Ok(id)) => {
            println!("✅ Account created: {}", id);
            id
        }
        Ok(Err(e)) => {
            println!("❌ Failed to create account: {:?}", e);
            return;
        }
        Err(_) => {
            println!("❌ Account creation timed out after 10 seconds");
            return;
        }
    };

    // Test 2: Try to read account (should fail without CDC)
    println!("\n📖 Test 2: Read Account (Expected to fail)");
    match tokio::time::timeout(Duration::from_secs(5), cqrs_service.get_account(account_id)).await {
        Ok(Ok(Some(account))) => {
            println!("✅ Account read successful: balance = {}", account.balance);
        }
        Ok(Ok(None)) => {
            println!("⚠️ Account not found in projections (expected without CDC)");
        }
        Ok(Err(e)) => {
            println!("❌ Read error: {:?}", e);
        }
        Err(_) => {
            println!("❌ Read operation timed out after 5 seconds");
        }
    }

    // Test 3: Try balance check (should fail without CDC)
    println!("\n💳 Test 3: Balance Check (Expected to fail)");
    match tokio::time::timeout(
        Duration::from_secs(5),
        cqrs_service.get_account_balance(account_id),
    )
    .await
    {
        Ok(Ok(balance)) => {
            println!("✅ Balance check successful: {}", balance);
        }
        Ok(Err(e)) => {
            println!("❌ Balance check error: {:?}", e);
        }
        Err(_) => {
            println!("❌ Balance check timed out after 5 seconds");
        }
    }

    // Test 4: Try deposit (should work)
    println!("\n💰 Test 4: Deposit Money");
    match tokio::time::timeout(
        Duration::from_secs(10),
        cqrs_service.deposit_money(account_id, Decimal::new(100, 0)),
    )
    .await
    {
        Ok(Ok(_)) => {
            println!("✅ Deposit successful");
        }
        Ok(Err(e)) => {
            println!("❌ Deposit error: {:?}", e);
        }
        Err(_) => {
            println!("❌ Deposit operation timed out after 10 seconds");
        }
    }

    // Test 5: Try withdraw (should work)
    println!("\n💸 Test 5: Withdraw Money");
    match tokio::time::timeout(
        Duration::from_secs(10),
        cqrs_service.withdraw_money(account_id, Decimal::new(50, 0)),
    )
    .await
    {
        Ok(Ok(_)) => {
            println!("✅ Withdraw successful");
        }
        Ok(Err(e)) => {
            println!("❌ Withdraw error: {:?}", e);
        }
        Err(_) => {
            println!("❌ Withdraw operation timed out after 10 seconds");
        }
    }

    println!("🎯 Basic functionality test completed!");
}
