use banking_es::{application::services::CQRSAccountService, infrastructure::init};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_simple_cdc_integration() {
    println!("🚀 Simple CDC Integration Test");
    println!("==============================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service without CDC
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        5,  // Low concurrency
        10, // Small batch size
        Duration::from_millis(100),
        false, // DISABLE write batching to avoid hangs
    ));

    println!("✅ CQRS service created");

    // Test 1: Create a single account
    println!("\n📝 Test 1: Create Account");
    let account_id = match cqrs_service
        .create_account("SimpleTestUser".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Account created: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create account: {:?}", e);
            return;
        }
    };

    // Test 2: Wait and try to read
    println!("\n📖 Test 2: Read Account");
    tokio::time::sleep(Duration::from_secs(2)).await;

    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!("✅ Account read successful: balance = {}", account.balance);
        }
        Ok(None) => {
            println!("⚠️ Account not found in projections (expected without CDC)");
        }
        Err(e) => {
            println!("❌ Read error: {:?}", e);
        }
    }

    // Test 3: Try a deposit
    println!("\n💰 Test 3: Deposit Money");
    match cqrs_service
        .deposit_money(account_id, Decimal::new(100, 0))
        .await
    {
        Ok(_) => {
            println!("✅ Deposit successful");
        }
        Err(e) => {
            println!("❌ Deposit error: {:?}", e);
        }
    }

    println!("🎯 Simple CDC test completed!");
}
