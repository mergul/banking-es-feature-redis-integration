use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{
        cache_service::{CacheConfig, CacheService, CacheServiceTrait},
        consistency_manager::ConsistencyManager,
        event_store::{EventStore, EventStoreTrait},
        init,
        projections::{ProjectionStore, ProjectionStoreTrait},
        redis_abstraction::RealRedisClient,
    },
};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::test]
async fn test_simple_consistency_manager_integration() {
    println!("🔧 Simple Consistency Manager Integration Test");
    println!("=============================================");

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return;
        }
    };

    // Create CQRS service
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        10,
        10,
        Duration::from_millis(100),
        false, // Disable write batching for simple test
    ));

    // Get the consistency manager from the CQRS service
    let consistency_manager = cqrs_service.get_consistency_manager();

    println!("✅ CQRS service created with consistency manager");

    // Test 1: Create account and verify projection status
    println!("\n📝 Test 1: Create Account");
    let account_id = match cqrs_service
        .create_account("TestUser".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Account created: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create account: {:?}", e);
            return;
        }
    };

    // Check initial projection status
    let initial_status = consistency_manager.get_projection_status(account_id).await;
    println!("📊 Initial projection status: {:?}", initial_status);

    // Wait a bit for any background processing
    tokio::time::sleep(Duration::from_millis(500)).await;

    // Manually mark projection as completed (simulating CDC processing)
    println!("🔧 Manually marking projection as completed...");
    consistency_manager
        .mark_projection_completed(account_id)
        .await;
    println!("✅ Projection marked as completed");

    // Verify projection status is now completed
    let completed_status = consistency_manager.get_projection_status(account_id).await;
    println!("📊 Completed projection status: {:?}", completed_status);

    // Test 2: Try to read the account (should work now)
    println!("\n📝 Test 2: Read Account");
    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!("✅ Successfully read account: {:?}", account);
        }
        Ok(None) => {
            println!("❌ Account not found");
        }
        Err(e) => {
            println!("❌ Error reading account: {:?}", e);
        }
    }

    // Test 3: Deposit money and verify consistency
    println!("\n📝 Test 3: Deposit Money");
    match cqrs_service
        .deposit_money(account_id, Decimal::new(500, 0))
        .await
    {
        Ok(_) => {
            println!("✅ Successfully deposited money");
        }
        Err(e) => {
            println!("❌ Error depositing money: {:?}", e);
        }
    }

    // Check projection status after deposit
    let deposit_status = consistency_manager.get_projection_status(account_id).await;
    println!("📊 Projection status after deposit: {:?}", deposit_status);

    // Manually mark projection as completed again
    consistency_manager
        .mark_projection_completed(account_id)
        .await;
    println!("✅ Projection marked as completed after deposit");

    // Verify final account balance
    match cqrs_service.get_account_balance(account_id).await {
        Ok(balance) => {
            println!("✅ Final account balance: {}", balance);
        }
        Err(e) => {
            println!("❌ Error getting balance: {:?}", e);
        }
    }

    println!("\n🎯 Simple consistency manager integration test completed!");
}
