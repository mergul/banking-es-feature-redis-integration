use banking_es::{application::services::CQRSAccountService, infrastructure::init};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("🔧 Single Account Creation Test");
    println!("===============================");

    // Set the database URL
    std::env::set_var(
        "DATABASE_URL",
        "postgresql://postgres:Francisco1@localhost:5432/banking_es",
    );

    // Initialize services
    let service_context = match banking_es::infrastructure::init::init_all_services().await {
        Ok(ctx) => {
            println!("✅ Services initialized");
            ctx
        }
        Err(e) => {
            println!("❌ Service initialization failed: {:?}", e);
            return Err(e.into());
        }
    };

    // Create CQRS service
    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        service_context.event_store.clone(),
        service_context.projection_store.clone(),
        service_context.cache_service.clone(),
        kafka_config,
        5,  // Low concurrency
        10, // Small batch size
        Duration::from_millis(100),
        false, // Disable write batching to avoid CDC dependency
    ));

    println!("✅ CQRS service created");

    // Test 1: Create account
    println!("\n📝 Test 1: Create Account");
    let account_id = match cqrs_service
        .create_account("TestUser".to_string(), Decimal::new(1000, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Account created: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create account: {:?}", e);
            return Err(e.into());
        }
    };

    // Test 2: Wait a bit and try to read the account
    println!("\n📖 Test 2: Read Account");
    tokio::time::sleep(Duration::from_secs(2)).await;

    match cqrs_service.get_account(account_id).await {
        Ok(Some(account)) => {
            println!("✅ Successfully read account: {:?}", account);
        }
        Ok(None) => {
            println!("❌ Account not found in projection");
        }
        Err(e) => {
            println!("❌ Error reading account: {:?}", e);
        }
    }

    // Test 3: Check projection table directly
    println!("\n🔍 Test 3: Check Projection Table Directly");

    // Use the projection store's get_account method instead of direct SQL
    match service_context
        .projection_store
        .get_account(account_id)
        .await
    {
        Ok(Some(projection)) => {
            println!("✅ Found account in projection table:");
            println!("   Account ID: {}", projection.id);
            println!("   Owner Name: {}", projection.owner_name);
            println!("   Balance: {}", projection.balance);
            println!("   Is Active: {}", projection.is_active);
            println!("   Created At: {}", projection.created_at);
            println!("   Updated At: {}", projection.updated_at);
        }
        Ok(None) => {
            println!("❌ Account not found in projection table");
        }
        Err(e) => {
            println!("❌ Error querying projection table: {:?}", e);
        }
    }

    println!("\n🎯 Test completed!");
    Ok(())
}
