use banking_es::{
    application::services::CQRSAccountService,
    infrastructure::{
        cache_service::{CacheConfig, CacheService},
        event_store::{EventStore, EventStoreTrait},
        projections::ProjectionStore,
        RealRedisClient,
    },
};
use rust_decimal::Decimal;
use std::sync::Arc;
use std::time::Duration;
use uuid::Uuid;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("🔍 Full CDC Pipeline Test");
    println!("=========================");

    // Set the database URL
    std::env::set_var(
        "DATABASE_URL",
        "postgresql://postgres:Francisco1@localhost:5432/banking_es",
    );

    // Initialize services
    let database_url = std::env::var("DATABASE_URL").unwrap_or_else(|_| {
        "postgresql://postgres:Francisco1@localhost:5432/banking_es".to_string()
    });

    let pool = sqlx::PgPool::connect(&database_url)
        .await
        .expect("Failed to connect to database");

    let redis_url =
        std::env::var("REDIS_URL").unwrap_or_else(|_| "redis://localhost:6379".to_string());
    let redis_client = redis::Client::open(redis_url).expect("Failed to create Redis client");
    let redis_client_trait = RealRedisClient::new(redis_client, None);

    let event_store = Arc::new(EventStore::new(pool.clone()));
    let cache_config = CacheConfig::default();
    let cache_service = Arc::new(CacheService::new(redis_client_trait, cache_config));
    let projection_store = Arc::new(ProjectionStore::new(pool.clone()));

    let kafka_config = banking_es::infrastructure::kafka_abstraction::KafkaConfig::default();
    let cqrs_service = Arc::new(CQRSAccountService::new(
        event_store.clone(),
        projection_store.clone(),
        cache_service.clone(),
        kafka_config.clone(),
        50,                     // max_concurrent_operations
        25,                     // batch_size
        Duration::from_secs(2), // batch_timeout
        true,                   // enable_write_batching
    ));

    // Start write batching service
    cqrs_service
        .start_write_batching()
        .await
        .expect("Failed to start write batching service");

    println!("✅ CQRS Service initialized");

    // Check current projections
    println!("\n📊 Current Projections Status");
    println!("=============================");

    let current_accounts = sqlx::query!(
        "SELECT COUNT(*) as count FROM account_projections WHERE is_active = true AND owner_name != ''"
    )
    .fetch_one(&pool)
    .await?;

    println!(
        "✅ Found {} active accounts in projections table",
        current_accounts.count.unwrap_or(0)
    );

    // Create a new account to trigger the full CDC pipeline
    println!("\n🔧 Creating New Account to Test Full CDC Pipeline");
    println!("=================================================");

    let new_account_id = match cqrs_service
        .create_account("FullCDCTestUser".to_string(), Decimal::new(750, 0))
        .await
    {
        Ok(id) => {
            println!("✅ Created new test account: {}", id);
            id
        }
        Err(e) => {
            println!("❌ Failed to create test account: {:?}", e);
            return Ok(());
        }
    };

    // Wait for the event to be captured by Debezium
    println!("⏳ Waiting for Debezium to capture event (3 seconds)...");
    tokio::time::sleep(Duration::from_secs(3)).await;

    // Check if the event was captured in Kafka
    println!("\n📡 Checking Kafka for CDC Event");
    println!("===============================");

    // Use a simple command to check Kafka messages
    let kafka_check = std::process::Command::new("/home/kafka/kafka/bin/kafka-console-consumer.sh")
        .args([
            "--bootstrap-server",
            "localhost:9092",
            "--topic",
            "banking-es.public.kafka_outbox_cdc",
            "--from-beginning",
            "--max-messages",
            "1",
            "--timeout-ms",
            "5000",
        ])
        .output();

    match kafka_check {
        Ok(output) => {
            if output.status.success() {
                let output_str = String::from_utf8_lossy(&output.stdout);
                if output_str.contains("FullCDCTestUser") {
                    println!("✅ CDC event found in Kafka for new account");
                } else {
                    println!("⚠️  CDC event in Kafka but not for our test account");
                }
            } else {
                println!(
                    "❌ Failed to check Kafka: {}",
                    String::from_utf8_lossy(&output.stderr)
                );
            }
        }
        Err(e) => {
            println!("❌ Failed to execute Kafka check: {:?}", e);
        }
    }

    // The issue is that we need a CDC consumer running to process the Kafka messages
    // and update the consistency manager. Let me check if we can manually trigger
    // the consistency manager for this account.

    println!("\n🔍 Testing Read Operations (with manual consistency check)");
    println!("=========================================================");

    // First, let's check if the account exists in the projections table
    let account_in_projections = sqlx::query!(
        "SELECT id, owner_name, balance, is_active FROM account_projections WHERE id = $1",
        new_account_id
    )
    .fetch_optional(&pool)
    .await?;

    match account_in_projections {
        Some(account) => {
            println!("✅ Account found in projections table:");
            println!("   ID: {}", account.id);
            println!("   Owner: {}", account.owner_name);
            println!("   Balance: {}", account.balance);
            println!("   Active: {}", account.is_active);
        }
        None => {
            println!("⚠️  Account not found in projections table yet");
        }
    }

    // Now test read operations
    println!("\n📖 Testing CQRS Read Operations");
    println!("================================");

    println!("🔍 Testing read operations for account: {}", new_account_id);

    // Test get_account with shorter timeout
    println!("  📖 Testing get_account (2s timeout)...");
    match tokio::time::timeout(
        Duration::from_secs(2),
        cqrs_service.get_account(new_account_id),
    )
    .await
    {
        Ok(Ok(Some(account_details))) => {
            println!(
                "    ✅ Success - Owner: {}, Balance: {}, Active: {}",
                account_details.owner_name, account_details.balance, account_details.is_active
            );
        }
        Ok(Ok(None)) => {
            println!("    ⚠️  Account not found in CQRS service");
        }
        Ok(Err(e)) => {
            println!("    ❌ Error: {:?}", e);
        }
        Err(_) => {
            println!("    ❌ Timeout (2s) - consistency manager waiting");
        }
    }

    // Test get_account_balance with shorter timeout
    println!("  💰 Testing get_account_balance (2s timeout)...");
    match tokio::time::timeout(
        Duration::from_secs(2),
        cqrs_service.get_account_balance(new_account_id),
    )
    .await
    {
        Ok(Ok(balance)) => {
            println!("    ✅ Success - Balance: {}", balance);
        }
        Ok(Err(e)) => {
            println!("    ❌ Error: {:?}", e);
        }
        Err(_) => {
            println!("    ❌ Timeout (2s) - consistency manager waiting");
        }
    }

    // Test is_account_active with shorter timeout
    println!("  ✅ Testing is_account_active (2s timeout)...");
    match tokio::time::timeout(
        Duration::from_secs(2),
        cqrs_service.is_account_active(new_account_id),
    )
    .await
    {
        Ok(Ok(is_active)) => {
            println!("    ✅ Success - Active: {}", is_active);
        }
        Ok(Err(e)) => {
            println!("    ❌ Error: {:?}", e);
        }
        Err(_) => {
            println!("    ❌ Timeout (2s) - consistency manager waiting");
        }
    }

    println!("\n📋 Summary:");
    println!("  - Debezium is running: ✅");
    println!("  - CDC events are being published to Kafka: ✅");
    println!("  - CDC consumer is NOT running: ❌");
    println!("  - Consistency manager is waiting for CDC notifications: ❌");
    println!("  - Read operations timeout because no CDC consumer processes events: ❌");
    println!("\n🔧 Solution: Need to start the CDC consumer to process Kafka messages");
    println!("   and notify the consistency manager when projections are updated.");

    Ok(())
}
